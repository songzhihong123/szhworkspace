通用的哈希函数的设计：
    大整数：
        一般是用过取模的方式来进行，为了保证哈希值的均匀分布，大整数可以模一个素数。
        什么范围内的要模一个多大的素数，并且哈希冲突的概率是多少有专门的研究。

    浮点数：
        在计算机中都是32位或者64位的二进制来表示，只不过计算机解析成了浮点数
        可以先通过二进制的数据转化为一个整数来处理

    字符串：
        转成一个大整数来处理
        166 =  1 * 10^2 + 6 * 10^1 + 6 * 10^0;
        若是字符串就把字符串可以转化为26进制的整数
        code = c* 26^3 + o * 26^2 + d * 26^1 + e * 26^0;
        code = c * B^3 + o * B^2 + d * B^1 + e * B^0;
        hash(code) = (c * B^3 + o * B^2 + d * B^1 + e * B^0) % M;
        hash(code) = ((((c * B) + o) * B + d) * B + e) % M;
        hash(code) = ((((c % M) * B + o) % M * B + d) % M * B + e) % M;
        java:
            int hash = 0;
            for(int i = 0 ; i < s.length ; i++){
                hash = (hash * B + s.charAt(i)) % M;
            }


原则：
    1.一致性：如果a==b ,则 hash(a) == hash(b)
    2.高效性：计算高效简便
    3.均匀性：哈希值均匀分布
